package com.syd.oden.gesturelock.view; 
2 
 
3 import android.content.Context; 
4 import android.graphics.Canvas; 
5 import android.graphics.Paint; 
6 import android.graphics.Paint.Style; 
7 import android.graphics.Path; 
8 import android.view.View; 
9 
 
10 public class GestureLockView extends View { 
11     /** 
12      * GestureLockView的三种状态 
13      */ 
14     enum Mode { 
15         STATUS_NO_FINGER, STATUS_FINGER_ON, STATUS_FINGER_UP; 
16     } 
17 
 
18     private Mode mCurrentStatus = Mode.STATUS_NO_FINGER; 
19     private int mWidth; 
20     private int mHeight; 
21     private int mRadius; 
22     private int mStrokeWidth = 2; 
23 
 
24     private int mCenterX; 
25     private int mCenterY; 
26     private Paint mPaint; 
27 
 
28     /** 
29      * 箭头（小三角最长边的一半长度 = mArrawRate * mWidth / 2 ） 
30      */ 
31     private float mArrowRate = 0.333f; 
32     private int mArrowDegree = -1; 
33     private Path mArrowPath; 
34     /** 
35      * 内圆的半径 = mInnerCircleRadiusRate * mRadus 
36      */ 
37     private float mInnerCircleRadiusRate = 0.3F; 
38 
 
39     /** 
40      * 四个颜色，可由用户自定义，初始化时由GestureLockViewGroup传入 
41      */ 
42     private int mColorNoFinger; 
43     private int mColorFingerOn; 
44     private int mColorFingerUpCorrect; 
45     private int mColorFingerUpError; 
46 
 
47     public GestureLockView(Context context, int colorNoFingerr, int colorFingerOn, int colorCorrect, int colorError) { 
48         super(context); 
49         this.mColorNoFinger = colorNoFingerr; 
50         this.mColorFingerOn = colorFingerOn; 
51         this.mColorFingerUpCorrect = colorCorrect; 
52         this.mColorFingerUpError = colorError; 
53         mPaint = new Paint(Paint.ANTI_ALIAS_FLAG); 
54         mArrowPath = new Path(); 
55     } 
56 
 
57     @Override 
58     protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) { 
59         super.onMeasure(widthMeasureSpec, heightMeasureSpec); 
60 
 
61         mWidth = MeasureSpec.getSize(widthMeasureSpec); 
62         mHeight = MeasureSpec.getSize(heightMeasureSpec); 
63 
 
64         // 取长和宽中的小值 
65         mWidth = mWidth < mHeight ? mWidth : mHeight; 
66         mRadius = mCenterX = mCenterY = mWidth / 2; 
67         mRadius -= mStrokeWidth / 2; 
68 
 
69         // 绘制三角形，初始时是个默认箭头朝上的一个等腰三角形，用户绘制结束后，根据由两个GestureLockView决定需要旋转多少度 
70         float mArrowLength = mWidth / 2 * mArrowRate; 
71         mArrowPath.moveTo(mWidth / 2, mStrokeWidth + 2); 
72         mArrowPath.lineTo(mWidth / 2 - mArrowLength, mStrokeWidth + 2 + mArrowLength); 
73         mArrowPath.lineTo(mWidth / 2 + mArrowLength, mStrokeWidth + 2 + mArrowLength); 
74         mArrowPath.close(); 
75         mArrowPath.setFillType(Path.FillType.WINDING); 
76     } 
77 
 
78     @Override 
79     protected void onDraw(Canvas canvas) { 
80 
 
81         switch (mCurrentStatus) { 
82             case STATUS_FINGER_ON: 
83                 // 绘制外圆 
84                 mPaint.setStyle(Style.STROKE); 
85                 mPaint.setColor(mColorFingerOn); 
86                 mPaint.setStrokeWidth(2); 
87                 canvas.drawCircle(mCenterX, mCenterY, mRadius, mPaint); 
88                 // 绘制内圆 
89                 mPaint.setStyle(Style.FILL); 
90                 canvas.drawCircle(mCenterX, mCenterY, mRadius * mInnerCircleRadiusRate, mPaint); 
91                 break; 
92             case STATUS_FINGER_UP: 
93                 // 绘制外圆 
94                 if (GestureLockViewGroup.isCorrect) 
95                     mPaint.setColor(mColorFingerUpCorrect); 
96                 else 
97                     mPaint.setColor(mColorFingerUpError); 
98 
 
99                 mPaint.setStyle(Style.STROKE); 
100                 mPaint.setStrokeWidth(2); 
101                 canvas.drawCircle(mCenterX, mCenterY, mRadius, mPaint); 
102                 // 绘制内圆 
103                 mPaint.setStyle(Style.FILL); 
104                 canvas.drawCircle(mCenterX, mCenterY, mRadius * mInnerCircleRadiusRate, mPaint); 
105                 drawArrow(canvas); 
106                 break; 
107             case STATUS_NO_FINGER: 
108                 // 绘制外圆 
109                 mPaint.setStyle(Style.STROKE); 
110                 mPaint.setColor(mColorNoFinger); 
111                 canvas.drawCircle(mCenterX, mCenterY, mRadius, mPaint); 
112                 // 绘制内圆 
113                 mPaint.setStyle(Style.FILL); 
114                 mPaint.setColor(mColorNoFinger); 
115                 canvas.drawCircle(mCenterX, mCenterY, mRadius * mInnerCircleRadiusRate, mPaint); 
116                 break; 
117         } 
118     } 
119 
 
120     /** 
121      * 绘制箭头 
122      * 
123      * @param canvas 
124      */ 
125     private void drawArrow(Canvas canvas) { 
126         if (mArrowDegree != -1) { 
127             mPaint.setStyle(Paint.Style.FILL); 
128 
 
129             canvas.save(); 
130             canvas.rotate(mArrowDegree, mCenterX, mCenterY); 
131             canvas.drawPath(mArrowPath, mPaint); 
132             canvas.restore(); 
133         } 
134     } 
135 
 
136     /** 
137      * 设置当前模式并重绘界面 
138      * 
139      * @param mode 
140      */ 
141     public void setMode(Mode mode) { 
142         this.mCurrentStatus = mode; 
143         invalidate(); 
144     } 
145 
 
146     public void setArrowDegree(int degree) { 
147         this.mArrowDegree = degree; 
148     } 
149 
 
150 } 
